@page "/management/clients"

@rendermode InteractiveServer

@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject IClientRepository ClientRepo

@attribute [StreamRendering]
@attribute [Authorize(Roles = SD.Role_Admin)]

<PageTitle>Clients Management - Zing</PageTitle>

<div class="row">
    <div class="col">
        <HeadingTitle Title="CLIENTS MANAGEMENT"></HeadingTitle>
    </div>
    <div class="col-auto align-content-center">
        <ClientUpsert OnPush="CreateClientAsync"></ClientUpsert>
        <br />
    </div>
</div>

@if (Clients is null)
{
    <div class="d-flex flex-column justify-content-center align-items-center h-100">
        <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.Large" />
    </div>
}
else
{
    <Grid TItem="Client"
          Class="table table-hover table-bordered table-striped"
          Data="Clients"
          OnRowDoubleClick="OnRowDoubleClick"
          AllowRowClick="true"
          AllowSorting="true"
          AllowPaging="true"
          AutoHidePaging="true"
          PageSize="20"
          Responsive="true">

        <GridColumns>
            <GridColumn TItem="Client" HeaderText="Name" SortKeySelector="item => item.Name">
                @context.Name
            </GridColumn>
            <GridColumn TItem="Client" HeaderText="Email" SortKeySelector="item => item.Email">
                @context.Email
            </GridColumn>
            <GridColumn TItem="Client" HeaderText="Phone Number" SortKeySelector="item => item.PhoneNumber">
                @context.PhoneNumber
            </GridColumn>
            <GridColumn TItem="Client" HeaderText="Position" SortKeySelector="item => item.Position">
                @context.Position
            </GridColumn>
            <GridColumn TItem="Client" HeaderText="Projects Total" SortKeySelector="item => item.Projects.Count">
                @(context.Projects is null ? "0" : context.Projects.Count.ToString())
            </GridColumn>
        </GridColumns>
    </Grid>
}
@code {
    [Inject] protected ToastService ToastService { get; set; } = default!;

    List<Client> Clients = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        Clients = await ClientRepo.GetAllAsync(includeProperties: "Projects") ?? new();

        StateHasChanged();
    }

    private async Task OnRowDoubleClick(GridRowEventArgs<Client> args) => await JS.InvokeVoidAsync("openInNewTab", $"/management/client?id={args.Item.Id}");

    public async Task CreateClientAsync(ClientCreateDTO model)
    {
        try
        {
            if (model != null)
            {
                Client client = new()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Name = model.Name,
                        Position = model.Position,
                        Email = model.Email,
                        PhoneNumber = model.PhoneNumber,
                        Date = DateOnly.FromDateTime(DateTime.Now),
                    };

                await ClientRepo.CreateAsync(client);

                ToastService.Notify(new(ToastType.Success, "Action Successful", $"Client was created successfully."));
            }
        }
        catch (Exception ex)
        {
            // handle exception
            Console.WriteLine($"An error occurred: {ex.Message}");
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
    }
}