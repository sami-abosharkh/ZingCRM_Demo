@page "/admin/user/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> _userManager;

@attribute [Authorize(Roles = SD.Role_Admin)]

<PageTitle>Create User</PageTitle>

<div class="container">
    <br />
    <h2 class="border-bottom">CREATE USER</h2>

    <EditForm method="post" Model="UserInput" OnValidSubmit="OnValidSubmitAsync" FormName="createUser">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="FName" @bind-Value="UserInput.FName" class="form-control" placeholder="Sami" />
                    <label for="FName">First Name</label>
                    <small><ValidationMessage For="() => UserInput.FName" class="text-danger" /></small>
                </div>
            </div>
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="LName" @bind-Value="UserInput.LName" class="form-control" placeholder="Sami" />
                    <label for="LName">Last Name</label>
                    <small><ValidationMessage For="() => UserInput.LName" class="text-danger" /></small>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col">
                <div class="form-floating">
                    <InputText id="Email" @bind-Value="UserInput.Email" class="form-control" placeholder="name@example.com" />
                    <label for="Email">Email</label>
                    <small><ValidationMessage For="() => UserInput.Email" class="text-danger" /></small>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputText id="PhoneNumber" @bind-Value="UserInput.PhoneNumber" class="form-control" placeholder="0500000000" />
                    <label for="PhoneNumber">Phone Number</label>
                    <small><ValidationMessage For="() => UserInput.PhoneNumber" class="text-danger" /></small>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col">
                <div class="form-floating">
                    <InputText type="password" id="Password" @bind-Value="UserInput.Password" class="form-control" placeholder="Password" />
                    <label for="Password">Password</label>
                    <small><ValidationMessage For="() => UserInput.Password" class="text-danger" /></small>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputText type="password" id="ConfirmPassword" @bind-Value="UserInput.ConfirmPassword" class="form-control" placeholder="Confirm Password" />
                    <label for="ConfirmPassword">Confirm Password</label>
                    <small><ValidationMessage For="() => UserInput.ConfirmPassword" class="text-danger" /></small>
                </div>
            </div>
        </div>
        <br />
        <div class="form-floating mb-3">
            <InputSelect id="Role" class="form-select" @bind-Value="UserInput.Role">
                <option selected> @SD.Role_ClientService</option>
                <option>@SD.Role_OperationManager</option>
                <option>@SD.Role_Accountant</option>
                <option>@SD.Role_Manager</option>
            </InputSelect>
            <label for="Role">Role</label>
        </div>
        <br />
        <div class="row">
            <div class="col-6 text-start">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Create</Button>
            </div>
            <div class="col-6 text-end">
                <Button Type="ButtonType.Link" To="/admin/users" Color="ButtonColor.Secondary" Outline="true">Cancel</Button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel UserInput { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        // Create a new ApplicationUser object with the input data
        ApplicationUser User = new()
            {
                FirstName = UserInput.FName,
                LastName = UserInput.LName,
                Email = UserInput.Email,
                UserName = UserInput.Email,
                PhoneNumber = UserInput.PhoneNumber,
                CreatedAt = DateTime.Now
            };
        try
        {
            // Create the user in the identity system
            var result = await _userManager.CreateAsync(User, UserInput.Password);

            // If user creation is successful, add the user to the selected role
            if (result.Succeeded)
            {
                await _userManager.AddToRoleAsync(User, UserInput.Role);
            }
            // Navigate to the admin users page
            NavManager.NavigateTo("/admin/users");
        }
        catch (Exception ex)
        {
            // Log any exception that occurs during user creation
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string FName { get; set; }

        [Required]
        [Display(Name = "Last Name")]
        public string LName { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }

        [Required]
        public string Role { get; set; }

        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; }
    }
}