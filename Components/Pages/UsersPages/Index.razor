@page "/admin/users"
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> _userManager;
@inject IJSRuntime JS

@attribute [Authorize(Roles = SD.Role_Admin)]

<PageTitle>Users Management</PageTitle>
<h2 class="border-bottom">USERS MANAGEMENT</h2>
<div class="row mb-2">
    <div class="text-end">
        <Button Type="ButtonType.Link" To="@($"/admin/user/create")" Color="ButtonColor.Primary" Outline="true">Create User</Button>
    </div>
</div>

<Grid TItem="ApplicationUser"
      Class="table table-hover table-bordered table-striped"
      DataProvider="UsersDataProvider"
      AllowSorting="true"
      AllowPaging="true"
      AllowRowClick="true"
      RowClass="GetRowClass"
      OnRowClick="OnRowClick"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="ApplicationUser" HeaderText="Name"
                    PropertyName="Name" SortKeySelector="item => item.FirstName">
            @($"{context.FirstName} {context.LastName}")
        </GridColumn>
        <GridColumn TItem="ApplicationUser" HeaderText="Email"
                    PropertyName="Email" SortKeySelector="item => item.Email">
            @context.Email
        </GridColumn>
        <GridColumn TItem="ApplicationUser" HeaderText="Role"
                    PropertyName="Role" SortKeySelector="item => item.Role">@context.Role</GridColumn>
        <GridColumn TItem="ApplicationUser" HeaderText="Last Login"
                    PropertyName="LastLogin" SortKeySelector="item => item.LastLogin">
            @TimeSinceDate(context.LastLogin)
        </GridColumn>
        <GridColumn TItem="ApplicationUser" HeaderText="Lockout End" PropertyName="LockoutEnd" SortKeySelector="item => item.LockoutEnd">
            @context.LockoutEnd
        </GridColumn>
    </GridColumns>
</Grid>

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    // List to hold all users
    private List<ApplicationUser> UsersList { get; set; } = new();

    private async Task<GridDataProviderResult<ApplicationUser>> UsersDataProvider(GridDataProviderRequest<ApplicationUser> request)
    {
        List<ApplicationUser> Users = default!;

        PreloadService.Show();
        try
        {
            Users = _userManager.Users.Where(f => !f.Email.Contains("admin")).ToList();
        }
        catch
        {
            // handle exception
        }
        finally
        {
            PreloadService.Hide();
        }

        return await Task.FromResult(request.ApplyTo(Users));
    }

    private async Task OnRowClick(GridRowEventArgs<ApplicationUser> args)
    {
        await JS.InvokeVoidAsync("openInNewTab", $"/admin/user?id={args.Item.Id}");
    }

    // Method to calculate the time since a given date and return a human-readable string
    private string TimeSinceDate(DateTime? date)
    {
        string text = "";

        // Calculate the time difference from the provided date
        if (date is not null)
        {
            TimeSpan timeSpan = DateTime.Now - (DateTime)date;
            if (timeSpan.TotalMinutes < 1)
            {
                text = "just now";
            }
            else if (timeSpan.TotalMinutes < 60)
            {
                text = $"{(int)timeSpan.TotalMinutes} mins ago";
            }
            else if (timeSpan.TotalHours < 24)
            {
                text = $"{(int)timeSpan.TotalHours} hours ago";
            }
            else if (timeSpan.TotalDays < 30)
            {
                text = $"{(int)timeSpan.TotalDays} days ago";
            }
            else if (timeSpan.TotalDays < 365)
            {
                text = $"{(int)(timeSpan.TotalDays / 30)} months ago";
            }
            else
            {
                text = $"{(int)(timeSpan.TotalDays / 365)} years ago";
            }
        }
        return text;
    }

    private string GetRowClass(ApplicationUser entity) => entity.LockoutEnd > DateTime.Now ? "table-danger" : "";
}