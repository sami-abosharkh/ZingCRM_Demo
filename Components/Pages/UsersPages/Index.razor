@page "/admin/users"

@rendermode @(new InteractiveServerRenderMode(false))

@inject IJSRuntime JS
@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> _userManager;

@attribute [Authorize(Roles = SD.Role_Admin)]

<PageTitle>Users Management</PageTitle>
<h1 class="text-center fw-bold">USERS MANAGEMENT</h1>
<hr />

<Card Class="shadow-sm">
    <CardBody>
        <CardTitle Class="fw-bold m-0">USERS LIST</CardTitle>
        <hr class="mt-2" />
        <Grid TItem="ApplicationUser"
              Class="table table-hover table-bordered table-striped"
              DataProvider="UsersDataProvider"
              AllowSorting="true"
              AllowPaging="true"
              AllowRowClick="true" 
              OnRowDoubleClick="OnRowDoubleClick"
              RowClass="GetRowClass"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="ApplicationUser" HeaderText="Name" SortKeySelector="item => item.FirstName">
                    @($"{context.FirstName} {context.LastName}")
                </GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Email" SortKeySelector="item => item.Email">
                    @context.Email
                </GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Role" SortKeySelector="item => item.Role">
                    @context.Role
                </GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Last Login" SortKeySelector="item => item.LastLogin">
                    @TimeSinceDate(context.LastLogin)
                </GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Lockout End" SortKeySelector="item => item.LockoutEnd">
                    @context.LockoutEnd
                </GridColumn>
            </GridColumns>
        </Grid>
    </CardBody>
    <CardFooter>
        <div class="text-end">
            <Button Type="ButtonType.Link" To="@($"/admin/user/create")" Color="ButtonColor.Primary">Create User</Button>
        </div>
    </CardFooter>
</Card>

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private async Task<GridDataProviderResult<ApplicationUser>> UsersDataProvider(GridDataProviderRequest<ApplicationUser> request)
    {
        List<ApplicationUser> Users = default!;
        try
        {
            if (Users is null)
            {
                PreloadService.Show();
                Users = _userManager.Users.Where(f => !f.Email.Contains("admin")).ToList() ?? new();

                // Get roles for each user and assign it to the user object
                foreach (var item in Users)
                {
                    var roles = await _userManager.GetRolesAsync(item);
                    item.Role = roles.FirstOrDefault();
                }
            }
        }
        catch
        {
            // handle exception
        }
        finally
        {
            PreloadService.Hide();
        }

        return await Task.FromResult(request.ApplyTo(Users));
    }

    private async Task OnRowDoubleClick(GridRowEventArgs<ApplicationUser> args)
    {
        await JS.InvokeVoidAsync("openInNewTab", $"/admin/user?id={args.Item.Id}");
    }

    // Method to calculate the time since a given date and return a human-readable string
    private string TimeSinceDate(DateTime? date)
    {
        string text = "";

        // Calculate the time difference from the provided date
        if (date is not null)
        {
            TimeSpan timeSpan = DateTime.Now - (DateTime)date;
            if (timeSpan.TotalMinutes < 1)
            {
                text = "just now";
            }
            else if (timeSpan.TotalMinutes < 60)
            {
                text = $"{(int)timeSpan.TotalMinutes} mins ago";
            }
            else if (timeSpan.TotalHours < 24)
            {
                text = $"{(int)timeSpan.TotalHours} hours ago";
            }
            else if (timeSpan.TotalDays < 30)
            {
                text = $"{(int)timeSpan.TotalDays} days ago";
            }
            else if (timeSpan.TotalDays < 365)
            {
                text = $"{(int)(timeSpan.TotalDays / 30)} months ago";
            }
            else
            {
                text = $"{(int)(timeSpan.TotalDays / 365)} years ago";
            }
        }
        return text;
    }

    private string GetRowClass(ApplicationUser entity) => entity.LockoutEnd > DateTime.Now ? "table-danger" : "";
}