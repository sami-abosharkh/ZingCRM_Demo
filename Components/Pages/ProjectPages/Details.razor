@page "/project/details"

@rendermode @(new InteractiveServerRenderMode(false))

@inject IProjectRepository ProjectRepo
@inject NavigationManager NavManager

@attribute [Authorize]

<PageTitle>Project Details</PageTitle>
<h1 class="text-center fw-bold">PROJECT DETAILS</h1>
<hr />
@if (Project is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Card Class="shadow-sm">
        <CardBody>
            <div class="d-flex justify-content-between align-items-center">
                <CardTitle Class="fw-bold m-0">INFORMATION</CardTitle>
                @if (Project.Status.Equals(SD.Status_Pending))
                {
                    <Badge Color="BadgeColor.Warning">@Project.Status</Badge>
                }
                else
                {
                    <Badge Color="@(Project.Status.Equals(SD.Status_Approved) ? BadgeColor.Success : BadgeColor.Danger)">@Project.Status</Badge>
                }
            </div>
            <hr class="mt-2" />
            <div class="d-flex">
                <DetailCard Title="AC #" Detail="@Project.ProjectNumber.ToString()"></DetailCard>
                <div class="mx-2" />
                <DetailCard Title="PO #" Detail="@Project.PONumber"></DetailCard>
                <div class="mx-2" />
                <DetailCard Title="Version" Detail="@Project.Version.ToString()"></DetailCard>
            </div>
            <DetailCard Title="Project Name" Detail="@Project.Name"></DetailCard>
            <DetailCard Title="Client" Detail="@Project.Client"></DetailCard>
            <div class="d-flex">
                <DetailCard Title="CS Manager" Detail="@($"{Project.User.FirstName} {Project.User.LastName}")"></DetailCard>
                <div class="mx-2" />
                <DetailCard Title="OPS Manager" Detail="@($"{Project.OperationUser.FirstName} {Project.OperationUser.LastName}")"></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Date" Detail="@Project.Date.ToString()"></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Due Date" Detail="@Project.DueDate.ToString("dd/MM/yy")"></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Invoice Date" Detail="@Project.InvoiceDate.ToString("dd/MM/yy")" BottomMargin="false"></DetailCard>
            </div>
        </CardBody>
        <AuthorizeView Roles="@($"{SD.Role_Admin},{SD.Role_ClientService}")">
            <CardFooter>
                <div class="row">
                    <div class="col-6">
                        <Button Type="ButtonType.Link" To="@($"/project/upsert?id={Project.Id}")" Color="ButtonColor.Warning" Disabled="!Project.CanEdit" Class="px-4">Edit</Button>
                        <Dropdown Color="DropdownColor.Secondary" Disabled="true">
                            <DropdownToggleButton>Version</DropdownToggleButton>
                            <DropdownMenu>
                                <DropdownItem To="#" Type="DropdownItemType.Link">Action</DropdownItem>
                                <DropdownItem To="#" Type="DropdownItemType.Link">Another action</DropdownItem>
                                <DropdownItem To="#" Type="DropdownItemType.Link">Something else here</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </div>
                    <div class="col-6 text-end">
                        @if (Project.Phase.Equals(PhaseSD.GetValue(PhaseSD.PhasesEnum.Priced)))
                        {
                            <ProjectConfirmationModel OnUpsertCB="OnProjectApproved" Project="Project"></ProjectConfirmationModel>
                        }
                    </div>
                </div>
            </CardFooter>
        </AuthorizeView>
    </Card>
    <br />
    <Card Class="shadow-sm">
        <CardBody>
            <CardTitle Class="fw-bold m-0">WORKFLOW STATUS</CardTitle>
            <hr class="mt-2" />
            <nav class="d-md-flex breadcrumbs user-select-none">
                @foreach (var item in PhaseSD.PhaseDictionary)
                {
                    var phaseEnum = item.Key; // This is the enum value (PhasesEnum)
                    var isActive = PhaseSD.IsDone(Project.Phase, phaseEnum);

                    <div class="breadcrumbs-item @(isActive ? "is-active" : "")"><span>@item.Value</span></div>
                }
            </nav>
        </CardBody>
        <CardFooter>
            <Button Color="ButtonColor.Warning" @onclick="OnShowOffcanvasClick" Class="px-4">Edit</Button>
        </CardFooter>
    </Card>
    <br />
    <Card Class="shadow-sm">
        <CardBody>
            <div class="d-flex justify-content-between align-items-center">
                <CardTitle Class="fw-bold m-0">ITEMS</CardTitle>
                @if (Project.Status.Equals(SD.Status_Pending))
                {
                    <Badge Color="BadgeColor.Warning">@Project.Status</Badge>
                }
                else
                {
                    <Badge Color="@(Project.Status.Equals(SD.Status_Approved) ? BadgeColor.Success : BadgeColor.Danger)">@Project.Status</Badge>
                }
            </div>

            <hr class="mt-2" />
            <GridItems Data="Project.Items.ToList()"></GridItems>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Price" Detail="@Project.TotalPrice.ToString("N2")"></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Cost" Detail="@Project.TotalCost.ToString("N2")"></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Margin $" Detail="@((Project.TotalCost == 0 || Project.TotalPrice == 0) ? "" : (Project.TotalPrice - Project.TotalCost).ToString("N2"))"></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Margin %" Detail="@((Project.TotalCost == 0 || Project.TotalPrice == 0) ? "" : ((Project.TotalPrice - Project.TotalCost) / Project.TotalPrice * 100).ToString("F2")+"%")" BottomMargin="false"></DetailCard>
            </div>
        </CardBody>
        @if (!PhaseSD.IsDone(Project.Phase, PhaseSD.PhasesEnum.Confirmed))
        {
            <CardFooter>
                <div class="text-end">
                    @if (Project.Phase.Equals(PhaseSD.GetValue(PhaseSD.PhasesEnum.Created)) || Project.Phase.Equals(PhaseSD.GetValue(PhaseSD.PhasesEnum.Costed)))
                    {
                        <CostModel Items="Project.Items.ToList()" OnCostEstimatedCB="UpsertCost"></CostModel>
                    }
                    @if (Project.Phase.Equals(PhaseSD.GetValue(PhaseSD.PhasesEnum.Costed)) || Project.Phase.Equals(PhaseSD.GetValue(PhaseSD.PhasesEnum.Priced)))
                    {
                        <PriceModel Items="Project.Items.ToList()" OnPriceQuotedCB="UpsertPrice"></PriceModel>
                    }
                </div>
            </CardFooter>
        }
    </Card>
    <br />
    <Card Class="shadow-sm">
        <CardBody>
            <CardTitle Class="fw-bold">PAYMENT REQUESTS</CardTitle>
            <hr class="mt-2" />
            <Grid TItem="PaymentRequestM"
                  AllowSorting="true"
                  Class="table table-hover table-bordered table-striped"
                  Data="PaymentRequests"
                  Responsive="true">
                <GridColumns>
                    <GridColumn TItem="PaymentRequestM" HeaderText="Id">
                        @context.Id
                    </GridColumn>
                </GridColumns>
            </Grid>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Transferred" Detail=""></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Requested" Detail=""></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Remaining" Detail=""></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Spent" Detail=""></DetailCard>
            </div>
            <div class="d-md-flex">
                <div class="w-100" />
                <div class="mx-2" />
                <DetailCard Title="Total Savings" Detail="" BottomMargin="false"></DetailCard>
            </div>
        </CardBody>
        @if (Project.Status.Equals(SD.Status_Approved))
        {
            <CardFooter>
                <div class="text-end">
                    <Button Color="ButtonColor.Primary">Create Request</Button>
                </div>
            </CardFooter>
        }
    </Card>
    <br />

    <Offcanvas @ref="offcanvas"
               title="Offcanvas">
        <BodyTemplate>
            <div>Some text as placeholder. In real life you can have the elements you have chosen. Like, text, images, lists, etc.</div>
            <div class="form-floating">
                <InputSelect id="Phase" class="form-select" @bind-Value="Project.Phase">
                    <option selected disabled>Select Phase</option>
                    @foreach (var item in PhaseSD.PhaseDictionary.Values)
                    {
                        <option>@item</option>
                    }
                </InputSelect>
                <label for="Phase">Phase</label>
            </div>
        </BodyTemplate>
    </Offcanvas>
}


@code {
    [Inject]
    protected PreloadService PreloadService { get; set; } = default!;

    private Offcanvas offcanvas = default!;
    private async Task OnShowOffcanvasClick() => await offcanvas.ShowAsync();

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    // Cascading parameter to get the current authentication state
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string CurrentUserId;
    private ProjectM Project;
    private List<PaymentRequestM> PaymentRequests { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        PreloadService.Show();
        try
        {
            // Adjust the claim type if necessary
            var roles = authState.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
            CurrentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            Project = await ProjectRepo.GetAsync(filter: x => x.Id == this.Id, includeProperties: "User,Items,OperationUser");

            if (roles.Contains(SD.Role_Admin))
            {
                Project.CanEdit = true;
                Project.CanProgress = true;
            }
            else if (roles.Contains(SD.Role_ClientService))
            {
                if (Project.UserId == CurrentUserId)
                {
                    Project.CanEdit = true;
                    Project.CanProgress = true;
                }
            }
            else if (roles.Contains(SD.Role_OperationManager))
            {
                if (Project.Phase == PhaseSD.PhaseDictionary.FirstOrDefault(f => f.Key == PhaseSD.PhasesEnum.Created).Value)
                {
                    Project.CanProgress = true;
                }
                else
                {
                    Project.CanProgress = false;
                }
            }

            foreach (var item in Project.Items)
            {
                item.TotalCost = item.Cost * item.Quantity;
                item.TotalPrice = item.Price * item.Quantity;
            }

            Project.TotalCost = Project.Items.Sum(item => item.TotalCost);
            Project.TotalPrice = Project.Items.Sum(item => item.TotalPrice);

            if (Project.Items.Any(f => f.Cost <= 0))
            {
                Project.Phase = PhaseSD.PhaseDictionary.FirstOrDefault(f => f.Key == PhaseSD.PhasesEnum.Created).Value;
            }
            else if (Project.Items.Any(f => f.Price <= 0))
            {
                Project.Phase = PhaseSD.PhaseDictionary.FirstOrDefault(f => f.Key == PhaseSD.PhasesEnum.Costed).Value;
            }
        }
        catch
        {
            // handle exception
        }
        finally
        {
            PreloadService.Hide();
            if (Project is null)
            {
                NavManager.NavigateTo("notfound");
            }
            else
            {
                StateHasChanged();
            }
        }
    }

    private async Task OnProjectApproved(ProjectConfirmationDTO model)
    {
        Project.Status = model.Status;
        Project.PONumber = model.PONumber;
        Project.DueDate = model.DueDate;
        Project.InvoiceDate = model.InvoiceDate;
        Project.Phase = PhaseSD.PhaseDictionary.FirstOrDefault(f => f.Key == PhaseSD.PhasesEnum.Confirmed).Value;
        await ProjectRepo.UpdateAsync(Project);
    }

    private async Task UpsertCost(List<ItemM> models)
    {
        if (models is not null)
        {
            Project.Items = models;
            Project.Phase = PhaseSD.PhaseDictionary.FirstOrDefault(f => f.Key == PhaseSD.PhasesEnum.Costed).Value;
            await ProjectRepo.UpdateAsync(Project);
            StateHasChanged();
        }
    }
    private async Task UpsertPrice(List<ItemM> models)
    {
        if (models is not null)
        {
            Project.Items = models;
            Project.Phase = PhaseSD.PhaseDictionary.FirstOrDefault(f => f.Key == PhaseSD.PhasesEnum.Priced).Value;

            await ProjectRepo.UpdateAsync(Project);
            StateHasChanged();
        }
    }
}
