@page "/project/details"
@using ZingCRM_Demo.Components.Shared.ItemComponents

@rendermode InteractiveServer

@inject IProjectRepository ProjectRepo
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>
<h1>Details</h1>

<div>
<hr />
@if (Project is null)
{
<p><em>Loading...</em></p>
}
else
{
<div class="row">
<Card>
<CardBody>
<dl class="row">
<dt class="col-sm-2">ProjectNumber</dt>
<dd class="col-sm-10">@Project.ProjectNumber</dd>
<dt class="col-sm-2">Version</dt>
<dd class="col-sm-10">@Project.Version</dd>
<dt class="col-sm-2">Name</dt>
<dd class="col-sm-10">@Project.Name</dd>
<dt class="col-sm-2">Client</dt>
<dd class="col-sm-10">@Project.Client</dd>
<dt class="col-sm-2">Status</dt>
<dd class="col-sm-10">@Project.Status</dd>
<dt class="col-sm-2">Date</dt>
<dd class="col-sm-10">@Project.Date</dd>
<dt class="col-sm-2">DueDate</dt>
<dd class="col-sm-10">@Project.DueDate.ToString("dd/MM/yy")</dd>
<dt class="col-sm-2">InvoiceDate</dt>
<dd class="col-sm-10">@Project.InvoiceDate.ToString("dd/MM/yy")</dd>
</dl>
<div>
<a href="@($"/project/edit?id={Project.Id}")">Edit</a> |
<a href="@($"/projects")">Back to List</a>
</div>
</CardBody>
</Card>
</div>
<br />
<div class="row">
<div class="d-flex justify-content-between align-items-center mb-2">
<h4 class="m-0">Items</h4>
@if (Project.Items.Any(p => p.Cost == 0) && Project.Phase.Equals(SD.Phase_Cost) || Project.Items.Any(p => p.Price == 0) && Project.Phase.Equals(SD.Phase_Price))
{
<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Disabled="true">Save</Button>
}
else
{
<Button @onclick="UpdateProject" Type="ButtonType.Button" Color="ButtonColor.Primary">Save</Button>
}
</div>

<Grid @ref="grid"
  TItem="ItemM"
  AllowSorting="true"
  Class="table table-hover table-bordered table-striped"
  DataProvider="ItemsDataProvider"
  AllowRowClick="true"
  OnRowClick="OnRowClick"
  Responsive="true">

<GridColumns>
<GridColumn TItem="ItemM" HeaderText="Item" SortKeySelector="item => item.Name">
@context.Name
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Quantity" SortKeySelector="item => item.Quantity">
@context.Quantity
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Price" SortKeySelector="item => item.Price">
@context.Price
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Cost" SortKeySelector="item => item.Cost">
@context.Cost
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Total Price" SortKeySelector="item => (item.Price * item.Quantity)">
@(context.Price * context.Quantity)
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Total Cost" SortKeySelector="item => item.Cost"> 
@(context.Cost * context.Quantity)
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Margin $">
@((context.Cost == 0 || context.Price == 0) ? 0 : ((context.Quantity * (context.Price - context.Cost))))
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Margin %">
@((context.Cost == 0 || context.Price == 0) ? 0 : $"{((context.Quantity * (context.Price - context.Cost)) / (context.Quantity * context.Price)) * 100}%")
</GridColumn>
</GridColumns>
</Grid>
<UpsertItem @ref="UpsertItem" SelectedItem="SelectedItem" EventCallBack="UpdateItem"></UpsertItem>
</div>
}

</div>

@code {
[Inject] protected PreloadService PreloadService { get; set; } = default!;
private Grid<ItemM> grid = default!;
private UpsertItem UpsertItem = default!;

[SupplyParameterFromQuery]
public int Id { get; set; }

private ProjectM Project;
private ItemM SelectedItem;

protected override async Task OnInitializedAsync()
{
Project = await ProjectRepo.GetAsync(filter: x => x.Id == this.Id, includeProperties: "Items", tracked: false);

if (Project is null)
{
NavigationManager.NavigateTo("notfound");
}
}

private async Task<GridDataProviderResult<ItemM>> ItemsDataProvider(GridDataProviderRequest<ItemM> request)
{
PreloadService.Show();
try
{
}
catch
{
// handle exception
}
finally
{
PreloadService.Hide();
}

return await Task.FromResult(request.ApplyTo(Project.Items));
}

private async Task OnRowClick(GridRowEventArgs<ItemM> args)
{
SelectedItem = args.Item;
// await UpsertItem.OnShowModal();
}

public async Task UpdateItem(ItemM model)
{
await grid.RefreshDataAsync();
}

private async Task UpdateProject()
{
if (Project.Phase.Equals(SD.Phase_Cost))
{
Project.Phase = SD.Phase_Price;
}
else if (Project.Phase.Equals(SD.Phase_Price))
{
Project.Phase = SD.Phase_Confirmation;
}
await ProjectRepo.UpdateAsync(Project);
}
}
