@page "/Project/edit"

@rendermode InteractiveServer

@inject IProjectRepository ProjectRepo
@inject NavigationManager NavManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>
<hr />
@if (Project is null)
{
<p><em>Loading...</em></p>
}
else
{
<div class="row">
<div class="col-md-4">
<EditForm method="post" Model="Project" OnValidSubmit="OnValidSubmitAsync" FormName="editProject" Enhance>
<DataAnnotationsValidator />
<input type="hidden" value="@Project.Id" />
<div class="mb-3">
<label for="projectnumber" class="form-label">ProjectNumber:</label>
<InputNumber id="projectnumber" @bind-Value="Project.ProjectNumber" class="form-control" readonly />
<ValidationMessage For="() => Project.ProjectNumber" class="text-danger" />
</div>
<div class="mb-3">
<label for="name" class="form-label">Project Name:</label>
<InputText id="name" @bind-Value="Project.Name" class="form-control" />
<ValidationMessage For="() => Project.Name" class="text-danger" />
</div>
<div class="mb-3">
<label for="client" class="form-label">Client:</label>
<InputText id="client" @bind-Value="Project.Client" class="form-control" />
<ValidationMessage For="() => Project.Client" class="text-danger" />
</div>
<div class="mb-3">
<label for="date" class="form-label">Date:</label>
<InputDate id="date" @bind-Value="Project.Date" class="form-control" readonly />
<ValidationMessage For="() => Project.Date" class="text-danger" />
</div>
<div class="mb-3">
<label for="DueDate" class="form-label">Due Date:</label>
<InputDate id="DueDate" @bind-Value="Project.DueDate" class="form-control" />
<ValidationMessage For="() => Project.DueDate" class="text-danger" />
</div>
<div class="mb-3">
<label for="InvoiceDate" class="form-label">Invoice Date:</label>
<InputDate id="InvoiceDate" @bind-Value="Project.InvoiceDate" class="form-control" />
<ValidationMessage For="() => Project.InvoiceDate" class="text-danger" />
</div>
<div>
<Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Update</Button>
<Button Type="ButtonType.Link" To="@($"/project/details?id={Project.Id}")" Color="ButtonColor.Secondary">Back</Button>
</div>
</EditForm>
</div>
<div class="col-md-8">
<div class="d-flex justify-content-between align-items-center mb-2">
<h4 class="m-0">Items</h4>
<Button @onclick="AddItemForm" Type="ButtonType.Button" Color="ButtonColor.Primary">Add Item</Button>
</div>
<Grid @ref="grid"
  TItem="ItemM"
  AllowSorting="true"
  Class="table table-hover table-bordered table-striped"
  Data="Items"
  AllowRowClick="true"
  OnRowClick="OnRowClick"
  Responsive="true">

<GridColumns>
<GridColumn TItem="ItemM" HeaderText="Item" SortKeySelector="item => item.Name">
@context.Name
</GridColumn>
<GridColumn TItem="ItemM" HeaderText="Quantity" SortKeySelector="item => item.Quantity">
@context.Quantity
</GridColumn>
</GridColumns>
</Grid>
<UpsertItem @ref="UpsertItem" EventCallBack="UpdateItem" SelectedItem="SelectedItem"></UpsertItem>
</div>
</div>
}
<br />

@code {
private Grid<ItemM> grid = default!;
private UpsertItem UpsertItem = default!;

[SupplyParameterFromQuery]
private int Id { get; set; }

[SupplyParameterFromForm]
private ProjectM Project { get; set; }

private ItemM SelectedItem;
private ICollection<ItemM> Items;

protected override async Task OnInitializedAsync()
{
Project = await ProjectRepo.GetAsync(filter: x => x.Id == this.Id, includeProperties: "Items");
Items = Project.Items;

if (Project is null)
{
NavManager.NavigateTo("notfound");
}
}

private async Task OnRowClick(GridRowEventArgs<ItemM> args)
{
SelectedItem = args.Item;
// await UpsertItem.OnShowModal();
}

private async Task AddItemForm()
{
SelectedItem = default!;
// await UpsertItem.OnShowModal();
}

public async Task UpdateItem(ItemM model)
{
if (model is not null)
{
var old = Items.FirstOrDefault(x => x.Id == model.Id);
Items.Remove(old);
Items.Add(model);
await grid.RefreshDataAsync();
}
}

// To protect from overposting attacks, enable the specific properties you want to bind to.
// For more details, see https://aka.ms/RazorPagesCRUD.
public async Task OnValidSubmitAsync()
{
try
{
await ProjectRepo.UpdateAsync(Project);
NavManager.NavigateTo($"/project/details?id={Project.Id}");
}
catch (Exception e)
{
Console.WriteLine(e.Message);
}
}
}
