@page "/projects"

@rendermode @(new InteractiveServerRenderMode(false))

@inject IProjectRepository ProjectRepo
@inject IJSRuntime JS

@attribute [Authorize]

<PageTitle>Projects</PageTitle>
<h1 class="text-center fw-bold">PROJECTS</h1>
<hr />
@if (Projects is not null)
{
    <Tabs EnableFadeEffect="true">
        <Tab Title="All">
            <Content>
                <br />
                <Card Class="shadow-sm">
                    <CardBody>
                        <CardTitle Class="fw-bold m-0">MY PROJECTS</CardTitle>
                        <hr class="mt-2" />
                        <GridProjects Data="Projects" OnDoubleClickCB="OnRowDoubleClick"></GridProjects>
                    </CardBody>
                    <CardFooter>
                        <AuthorizeView Roles="@($"{SD.Role_Admin},{SD.Role_ClientService}")">
                            <div class="row">
                                <div class="col">
                                    <ActionConfirmation OnEventCB="DeleteProjects"
                                                        Action="Delete All"
                                                        Outline="true"
                                                        DialogTitle="Delete Projects"
                                                        DialogMessage1="@($"Are you sure you want to delete all projects?")"
                                                        DialogMessage2="Do you want to proceed?">
                                    </ActionConfirmation>
                                </div>
                                <div class="col text-end">
                                    <Button Type="ButtonType.Link" To="project/upsert" Color="ButtonColor.Primary">Create Project</Button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </CardFooter>
                </Card>
            </Content>
        </Tab>
        <Tab Title="Pending" Active="true">
            <Content>
                <br />
                <Card Class="shadow-sm">
                    <CardBody>
                        <CardTitle Class="fw-bold m-0">MY PROJECTS</CardTitle>
                        <hr class="mt-2" />
                        <GridProjects Data="Projects.Where(f => f.Status.Equals(SD.Status_Pending)).ToList()" OnDoubleClickCB="OnRowDoubleClick"></GridProjects>
                    </CardBody>
                    <CardFooter>
                        <AuthorizeView Roles="@($"{SD.Role_Admin},{SD.Role_ClientService}")">
                            <div class="row">
                                <div class="col">
                                    <ActionConfirmation OnEventCB="DeleteProjects"
                                                        Action="Delete All"
                                                        Outline="true"
                                                        DialogTitle="Delete Projects"
                                                        DialogMessage1="@($"Are you sure you want to delete all projects?")"
                                                        DialogMessage2="Do you want to proceed?">
                                    </ActionConfirmation>
                                </div>
                                <div class="col text-end">
                                    <Button Type="ButtonType.Link" To="project/upsert" Color="ButtonColor.Primary">Create Project</Button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </CardFooter>
                </Card>
            </Content>
        </Tab>
        <Tab Title="Approved">
            <Content>
                <br />
                <Card Class="shadow-sm">
                    <CardBody>
                        <CardTitle Class="fw-bold m-0">MY PROJECTS</CardTitle>
                        <hr class="mt-2" />
                        <GridProjects Data="Projects.Where(f => f.Status.Equals(SD.Status_Approved)).ToList()" OnDoubleClickCB="OnRowDoubleClick"></GridProjects>
                    </CardBody>
                    <CardFooter>
                        <AuthorizeView Roles="@($"{SD.Role_Admin},{SD.Role_ClientService}")">
                            <div class="row">
                                <div class="col">
                                    <ActionConfirmation OnEventCB="DeleteProjects"
                                                        Action="Delete All"
                                                        Outline="true"
                                                        DialogTitle="Delete Projects"
                                                        DialogMessage1="@($"Are you sure you want to delete all projects?")"
                                                        DialogMessage2="Do you want to proceed?">
                                    </ActionConfirmation>
                                </div>
                                <div class="col text-end">
                                    <Button Type="ButtonType.Link" To="project/upsert" Color="ButtonColor.Primary">Create Project</Button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </CardFooter>
                </Card>
            </Content>
        </Tab>
        <Tab Title="Rejected">
            <Content>
                <br />
                <Card Class="shadow-sm">
                    <CardBody>
                        <CardTitle Class="fw-bold m-0">MY PROJECTS</CardTitle>
                        <hr class="mt-2" />
                        <GridProjects Data="Projects.Where(f => f.Status.Equals(SD.Status_Rejected)).ToList()" OnDoubleClickCB="OnRowDoubleClick"></GridProjects>
                    </CardBody>
                    <CardFooter>
                        <AuthorizeView Roles="@($"{SD.Role_Admin},{SD.Role_ClientService}")">
                            <div class="row">
                                <div class="col">
                                    <ActionConfirmation OnEventCB="DeleteProjects"
                                                        Action="Delete All"
                                                        Outline="true"
                                                        DialogTitle="Delete Projects"
                                                        DialogMessage1="@($"Are you sure you want to delete all projects?")"
                                                        DialogMessage2="Do you want to proceed?">
                                    </ActionConfirmation>
                                </div>
                                <div class="col text-end">
                                    <Button Type="ButtonType.Link" To="project/upsert" Color="ButtonColor.Primary">Create Project</Button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </CardFooter>
                </Card>
            </Content>
        </Tab>
        <Tab Title="Completed">
            <Content>
                <br />
                <Card Class="shadow-sm">
                    <CardBody>
                        <CardTitle Class="fw-bold m-0">MY PROJECTS</CardTitle>
                        <hr class="mt-2" />
                        <GridProjects Data="Projects.Where(f => f.Status.Equals(SD.Status_Completed)).ToList()" OnDoubleClickCB="OnRowDoubleClick"></GridProjects>
                    </CardBody>
                    <CardFooter>
                        <AuthorizeView Roles="@($"{SD.Role_Admin},{SD.Role_ClientService}")">
                            <div class="row">
                                <div class="col">
                                    <ActionConfirmation OnEventCB="DeleteProjects"
                                                        Action="Delete All"
                                                        Outline="true"
                                                        DialogTitle="Delete Projects"
                                                        DialogMessage1="@($"Are you sure you want to delete all projects?")"
                                                        DialogMessage2="Do you want to proceed?">
                                    </ActionConfirmation>
                                </div>
                                <div class="col text-end">
                                    <Button Type="ButtonType.Link" To="project/upsert" Color="ButtonColor.Primary">Create Project</Button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </CardFooter>
                </Card>
            </Content>
        </Tab>
    </Tabs>
}

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    // Cascading parameter to get the current authentication state
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private List<ProjectM> Projects = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        PreloadService.Show();
        try
        {
            var roles = authState.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (roles.Contains(SD.Role_Admin))
            {
                Projects = await ProjectRepo.GetAllAsync(
                    orderBy: p => p.ProjectNumber,
                    ascending: false,
                    includeProperties: "User,Items,OperationUser"); // call a service or an API to pull the Projects
            }
            else if (roles.Contains(SD.Role_ClientService))
            {
                Projects = await ProjectRepo.GetAllAsync(
                    orderBy: p => p.ProjectNumber,
                    ascending: false,
                    filter: f => f.UserId.Equals(userId),
                    includeProperties: "User,Items,OperationUser"); // call a service or an API to pull the Projects
            }
            else if (roles.Contains(SD.Role_OperationManager))
            {
                Projects = await ProjectRepo.GetAllAsync(
                    orderBy: p => p.ProjectNumber,
                    ascending: false,
                    filter: f => f.OperationUserId.Equals(userId),
                    includeProperties: "User,Items,OperationUser"); // call a service or an API to pull the Projects
            }
            else
            {
                Projects = new();
            }
        }
        catch
        {
            // handle exception
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task OnRowDoubleClick(ProjectM entity) => await JS.InvokeVoidAsync("openInNewTab", $"/project/details?id={entity.Id}");

    private async Task DeleteProjects() => await ProjectRepo.RemoveRange(Projects);
}
