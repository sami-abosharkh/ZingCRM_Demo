@page "/projects"

@rendermode InteractiveServer

@inject IProjectRepository ProjectRepo
@inject IJSRuntime JS

<PageTitle>Projects</PageTitle>
<h1>PROJECTS</h1>
<hr />
<div class="row">
    <div class="col-6">
        <h2>Created Phase</h2>
    </div>
    <div class="col-6 text-end">
        <Button Type="ButtonType.Link" To="project/create" Color="ButtonColor.Primary">Create Project</Button>
        <Button @onclick="DeleteProjects" Type="ButtonType.Button" Color="ButtonColor.Danger">Delete All</Button>
    </div>
</div>
<Grid @ref="grid"
      TItem="ProjectM"
      AllowRowClick="true"
      AllowSorting="true"
      Class="table table-hover table-bordered table-striped"
      DataProvider="ProjectsDataProvider"
      AllowPaging="true"
      PageSize="10"
      AutoHidePaging="true"
      OnRowClick="OnRowClick"
      RowClass="GetRowClass"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="ProjectM" HeaderText="Project Number" SortKeySelector="item => item.ProjectNumber">
            @context.ProjectNumber
        </GridColumn>
        <GridColumn TItem="ProjectM" HeaderText="Project Name" SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="ProjectM" HeaderText="Client" SortKeySelector="item => item.Client">
            @context.Client
        </GridColumn>
        <GridColumn TItem="ProjectM" HeaderText="Status" SortKeySelector="item => item.Status">
            @context.Status
        </GridColumn>
        <GridColumn TItem="ProjectM" HeaderText="Date" SortKeySelector="item => item.Date">
            @context.Date.ToString("dd/MM/yy")
        </GridColumn>
        <GridColumn TItem="ProjectM" HeaderText="Phase" SortKeySelector="item => item.Phase">
            @context.Phase
        </GridColumn>
    </GridColumns>
</Grid>

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private Grid<ProjectM> grid = default!;

    private async Task<GridDataProviderResult<ProjectM>> ProjectsDataProvider(GridDataProviderRequest<ProjectM> request)
    {
        IEnumerable<ProjectM> Projects = default!;
        PreloadService.Show();
        try
        {
            Projects = await ProjectRepo.GetAllAsync(
            orderBy: p => p.ProjectNumber,
            ascending: false,
            includeProperties: "Items"); // call a service or an API to pull the Projects
        }
        catch
        {
            // handle exception
        }
        finally
        {
            PreloadService.Hide();
        }

        return await Task.FromResult(request.ApplyTo(Projects));
    }

    private async Task OnRowClick(GridRowEventArgs<ProjectM> args)
    {
        await JS.InvokeVoidAsync("openInNewTab", $"/project/details?id={args.Item.Id}");
    }

    private string GetRowClass(ProjectM entity)
    {
        switch (entity.Phase)
        {
            case SD.Phase_Cost:
                return "table-warning";
            case SD.Phase_Price:
                return "table-warning";
            case SD.Phase_PurchaseOrder:
                return "table-warning";
            default:
                return string.Empty;
        }
    }

    private async Task DeleteProjects()
    {
        var projects = await ProjectRepo.GetAllAsync();
        await ProjectRepo.RemoveRange(projects);
        await grid.RefreshDataAsync();
    }
}
