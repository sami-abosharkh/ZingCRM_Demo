@page "/project/create"

@rendermode InteractiveServer

@inject IProjectRepository ProjectRepo
@inject NavigationManager NavManager

<PageTitle>Create Project</PageTitle>

<h1>Create</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Project" OnValidSubmit="OnValidSubmitAsync" FormName="createProject">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="projectnumber" class="form-label">ProjectNumber:</label>
                <InputNumber id="projectnumber" @bind-Value="Project.ProjectNumber" class="form-control" readonly />
                <small><ValidationMessage For="() => Project.ProjectNumber" class="text-danger" /></small>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Project Name:</label>
                <InputText id="name" @bind-Value="Project.Name" class="form-control" />
                <ValidationMessage For="() => Project.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="client" class="form-label">Client:</label>
                <InputText id="client" @bind-Value="Project.Client" class="form-control" />
                <ValidationMessage For="() => Project.Client" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Project.Date" class="form-control" readonly />
                <ValidationMessage For="() => Project.Date" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="DueDate" class="form-label">Due Date:</label>
                <InputDate id="DueDate" @bind-Value="Project.DueDate" class="form-control" />
                <ValidationMessage For="() => Project.DueDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="InvoiceDate" class="form-label">Invoice Date:</label>
                <InputDate id="InvoiceDate" @bind-Value="Project.InvoiceDate" class="form-control" />
                <ValidationMessage For="() => Project.InvoiceDate" class="text-danger" />
            </div>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Create</Button>
        </EditForm>
    </div>
    <div class="col-md-8">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h4 class="m-0">Items</h4>
            <UpsertItem EventCallBack="AddItem"></UpsertItem>
        </div>
        <Grid @ref="grid"
              TItem="ItemM"
              AllowSorting="true"
              Class="table table-hover table-bordered table-striped"
              Data="Items"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="ItemM" HeaderText="Name" SortKeySelector="item => item.Name">
                    @context.Name
                </GridColumn>
                <GridColumn TItem="ItemM" HeaderText="Quantity" SortKeySelector="item => item.Quantity">
                    @context.Quantity
                </GridColumn>
            </GridColumns>
        </Grid>
    </div>
</div>

<div>
    <a href="/projects">Back to List</a>
</div>

@code {
    private Grid<ItemM> grid = default!;

    [SupplyParameterFromForm]
    private ProjectM Project { get; set; } = new();
    private List<ItemM> Items { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Project.Date = DateTime.Now;
        Project.Version = 1;
        Project.Phase = SD.Phase_Cost;
        Project.Status = SD.Status_Pending;
        Project.DueDate = DateTime.Now.AddDays(30);
        Project.InvoiceDate = DateTime.Now.AddDays(30);

        try
        {
            Project.ProjectNumber = await ProjectRepo.GetTotalCountAsync() + 1;
        }
        catch (Exception)
        {
            Project.ProjectNumber = 0;
            throw;
        }
    }

    public async Task AddItem(ItemM model)
    {
        if (model is not null)
        {
            Items.Add(model);
            Project.Items = Items;
            await grid.RefreshDataAsync();
        }
    }

    public async Task OnValidSubmitAsync()
    {
        await ProjectRepo.CreateAsync(Project);
        NavManager.NavigateTo("/projects");
    }
}
