<ConfirmDialog @ref="dialog" />

@if (Disable)
{
    <Button Color="ButtonColor" Outline="Outline" Disabled="true" Class="@ButtonClass">
        <i class="@(string.IsNullOrEmpty(IconName) ? "" : $"bi {IconName}")"></i>
        @Action
    </Button>
}
else
{
    <Button @onclick="OnConfirmationAsync" Outline="Outline" Color="ButtonColor" Class="@ButtonClass">
        <i class="@(string.IsNullOrEmpty(IconName) ? "" : $"bi {IconName}")"></i>
        @Action
    </Button>
}

@code {
    private ConfirmDialog dialog = default!;

    [Parameter]
    public EventCallback OnEventCB { get; set; }

    //-- Button Options
    [Parameter]
    public bool Disable { get; set; }
    [Parameter]
    public bool Outline { get; set; }
    [Parameter]
    public ButtonColor ButtonColor { get; set; } = ButtonColor.Danger;
    [Parameter]
    public string ButtonClass { get; set; } = string.Empty;
    [Parameter]
    public string IconName { get; set; } = default!;

    //-- Dialog Options
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public string DialogTitle { get; set; } = "";
    [Parameter]
    public string DialogMessage1 { get; set; } = "";
    [Parameter]
    public string DialogMessage2 { get; set; } = "";

    private async Task OnConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                YesButtonText = "Confirm",
                YesButtonColor = ButtonColor == ButtonColor.Secondary ? ButtonColor.Warning : ButtonColor,
                NoButtonText = "Cancel",
                NoButtonColor = ButtonColor.Secondary,
                DialogCssClass = "text-start",

            };
        var confirmation = await dialog.ShowAsync(
            title: DialogTitle,
            message1: DialogMessage1,
            message2: DialogMessage2,
            confirmDialogOptions: options);

        if (confirmation)
        {
            await OnEventCB.InvokeAsync();
        }
    }
}