// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZingCRM_Demo.Data;

#nullable disable

namespace ZingCRM_Demo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Everything that has to do with 2D and 3D designs.",
                            Name = "Designs"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All Electronic and Appliances which include batteries and tablets.",
                            Name = "Electronics & Appliances"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All items designated for gifting in an activity that is gifting related, which includes notebooks and vouchers.",
                            Name = "Gifting"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All promoters and supervisors.",
                            Name = "Manpower"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All items that are required for an office launch, this includes the gifts and danglers and other production elements that were created for the office launch.",
                            Name = "Office Launches"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Anything that needed to be attested for a specific project.",
                            Name = "Official Documents"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All recruited photographers and videographers.",
                            Name = "Photography & Videography"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All production elements within a project not including a giveaway and office launch project.",
                            Name = "POSM Productions"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Anything Logistics including Installation and Dismantling of any soft or hard POSM.",
                            Name = "Logistics"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Anything required to run a promotion activity which includes tables and uniforms.",
                            Name = "Promoting Material"
                        },
                        new
                        {
                            Id = 11,
                            Description = "All location rental costs.",
                            Name = "Rental"
                        },
                        new
                        {
                            Id = 12,
                            Description = "All international shipments.",
                            Name = "Shipping International"
                        },
                        new
                        {
                            Id = 13,
                            Description = "All local shipments including store deployment.",
                            Name = "Shipping Local"
                        },
                        new
                        {
                            Id = 14,
                            Description = "All costs related to renting a temporary warehouse.",
                            Name = "Storage & Warehousing"
                        },
                        new
                        {
                            Id = 15,
                            Description = "All travels and lodging for specific projects.",
                            Name = "Travel Expenses"
                        },
                        new
                        {
                            Id = 16,
                            Description = "All VR and App Programming related costs.",
                            Name = "Programming"
                        });
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            Name = "Male Promoter"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            Name = "Female Promoter"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            Name = "Male Supervisor"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Name = "Female Supervisor"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Name = "Male Usher"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Name = "Female Usher"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Name = "Laborer"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Name = "HARD POSM: Gondola"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Name = "HARD POSM: Gondola End Stand"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Name = "HARD POSM: 60x40 FSU"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Name = "HARD POSM: 50x50 FSU"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Name = "HARD POSM: 1x1"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Name = "HARD POSM: 2x1"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Name = "HARD POSM: 2x2"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Name = "HARD POSM: 3x2"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            Name = "HARD POSM: 3x3"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            Name = "HARD POSM: 4x2"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            Name = "HARD POSM: 4x4"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            Name = "HARD POSM: 5x2"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Name = "HARD POSM: 5x3"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            Name = "HARD POSM: 5x5"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            Name = "Exhibition Booth 3x3"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            Name = "Exhibition Booth 5x3"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            Name = "Exhibition Booth 5x5"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            Name = "Exhibition Booth 7x5"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            Name = "D-Com Banner"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            Name = "Social Media Post"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            Name = "SOFT POSM: Danglers"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 1,
                            Name = "SOFT POSM: Wobblers"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 1,
                            Name = "SOFT POSM: Dividers"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 1,
                            Name = "SOFT POSM: Shelf Strips"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 1,
                            Name = "SOFT POSM: Base Wrap"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 1,
                            Name = "SOFT POSM: Floor Sticker"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 1,
                            Name = "SOFT POSM: Tent Card"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 2,
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 2,
                            Name = "Tablet"
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 2,
                            Name = "Screen"
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 3,
                            Name = "Voucher"
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 3,
                            Name = "Pen"
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 3,
                            Name = "Notebook"
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 3,
                            Name = "Box"
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 7,
                            Name = "Videography"
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 7,
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 7,
                            Name = "Photography & Videography"
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 7,
                            Name = "Drone Videography"
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 7,
                            Name = "Drone Photography"
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 8,
                            Name = "HARD POSM: Gondola"
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 8,
                            Name = "HARD POSM: Gondola End Stand"
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 8,
                            Name = "HARD POSM: 60x40 FSU"
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 8,
                            Name = "HARD POSM: 50x50 FSU"
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 8,
                            Name = "HARD POSM: 1x1"
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 8,
                            Name = "HARD POSM: 2x1"
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 8,
                            Name = "HARD POSM: 2x2"
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 8,
                            Name = "HARD POSM: 3x2"
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 8,
                            Name = "HARD POSM: 3x3"
                        },
                        new
                        {
                            Id = 56,
                            CategoryId = 8,
                            Name = "HARD POSM: 4x2"
                        },
                        new
                        {
                            Id = 57,
                            CategoryId = 8,
                            Name = "HARD POSM: 4x4"
                        },
                        new
                        {
                            Id = 58,
                            CategoryId = 8,
                            Name = "HARD POSM: 5x2"
                        },
                        new
                        {
                            Id = 59,
                            CategoryId = 8,
                            Name = "HARD POSM: 5x3"
                        },
                        new
                        {
                            Id = 60,
                            CategoryId = 8,
                            Name = "HARD POSM: 5x5"
                        },
                        new
                        {
                            Id = 61,
                            CategoryId = 8,
                            Name = "Exhibition Booth 3x3"
                        },
                        new
                        {
                            Id = 62,
                            CategoryId = 8,
                            Name = "Exhibition Booth 5x3"
                        },
                        new
                        {
                            Id = 63,
                            CategoryId = 8,
                            Name = "Exhibition Booth 5x5"
                        },
                        new
                        {
                            Id = 64,
                            CategoryId = 8,
                            Name = "Exhibition Booth 7x5"
                        },
                        new
                        {
                            Id = 65,
                            CategoryId = 8,
                            Name = "SOFT POSM: Danglers"
                        },
                        new
                        {
                            Id = 66,
                            CategoryId = 8,
                            Name = "SOFT POSM: Wobblers"
                        },
                        new
                        {
                            Id = 67,
                            CategoryId = 8,
                            Name = "SOFT POSM: Dividers"
                        },
                        new
                        {
                            Id = 68,
                            CategoryId = 8,
                            Name = "SOFT POSM: Shelf Strips"
                        },
                        new
                        {
                            Id = 69,
                            CategoryId = 8,
                            Name = "SOFT POSM: Base Wrap"
                        },
                        new
                        {
                            Id = 70,
                            CategoryId = 8,
                            Name = "SOFT POSM: Floor Sticker"
                        },
                        new
                        {
                            Id = 71,
                            CategoryId = 8,
                            Name = "SOFT POSM: Tent Card"
                        },
                        new
                        {
                            Id = 72,
                            CategoryId = 9,
                            Name = "Stand Deployment and Installation"
                        },
                        new
                        {
                            Id = 73,
                            CategoryId = 9,
                            Name = "Booth Deployment and Installation"
                        },
                        new
                        {
                            Id = 74,
                            CategoryId = 10,
                            Name = "Uniforms"
                        },
                        new
                        {
                            Id = 75,
                            CategoryId = 10,
                            Name = "Promoter Tables"
                        },
                        new
                        {
                            Id = 76,
                            CategoryId = 10,
                            Name = "Decorations"
                        },
                        new
                        {
                            Id = 77,
                            CategoryId = 10,
                            Name = "Branded Cups"
                        },
                        new
                        {
                            Id = 78,
                            CategoryId = 10,
                            Name = "Unbranded Cups"
                        },
                        new
                        {
                            Id = 79,
                            CategoryId = 10,
                            Name = "Spoons"
                        },
                        new
                        {
                            Id = 80,
                            CategoryId = 10,
                            Name = "Forks"
                        },
                        new
                        {
                            Id = 81,
                            CategoryId = 10,
                            Name = "Kraft Plates"
                        },
                        new
                        {
                            Id = 82,
                            CategoryId = 10,
                            Name = "Hair Nets"
                        },
                        new
                        {
                            Id = 83,
                            CategoryId = 10,
                            Name = "Masks"
                        },
                        new
                        {
                            Id = 84,
                            CategoryId = 10,
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 85,
                            CategoryId = 11,
                            Name = "Mall Rental"
                        },
                        new
                        {
                            Id = 86,
                            CategoryId = 11,
                            Name = "Supermarket Rentals"
                        },
                        new
                        {
                            Id = 87,
                            CategoryId = 11,
                            Name = "Event Rentals"
                        },
                        new
                        {
                            Id = 88,
                            CategoryId = 12,
                            Name = "KSA - UAE"
                        },
                        new
                        {
                            Id = 89,
                            CategoryId = 12,
                            Name = "UAE - KSA"
                        },
                        new
                        {
                            Id = 90,
                            CategoryId = 13,
                            Name = "Jeddah - Riyadh"
                        },
                        new
                        {
                            Id = 91,
                            CategoryId = 13,
                            Name = "Jeddah - Dammam"
                        },
                        new
                        {
                            Id = 92,
                            CategoryId = 13,
                            Name = "Riyadh - Jeddah"
                        },
                        new
                        {
                            Id = 93,
                            CategoryId = 13,
                            Name = "Riyadh - Dammam"
                        },
                        new
                        {
                            Id = 94,
                            CategoryId = 13,
                            Name = "Dammam - Riyadh"
                        },
                        new
                        {
                            Id = 95,
                            CategoryId = 13,
                            Name = "Dammam - Jeddah"
                        },
                        new
                        {
                            Id = 96,
                            CategoryId = 13,
                            Name = "Jeddah - Remote Cities"
                        },
                        new
                        {
                            Id = 97,
                            CategoryId = 16,
                            Name = "Microsite"
                        },
                        new
                        {
                            Id = 98,
                            CategoryId = 16,
                            Name = "Apps"
                        });
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OperationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("OperationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.PurchaseRequisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("PurchaseRequisitions");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.QuotationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProjectId");

                    b.ToTable("QuotationItems");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.RequisitionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<int?>("PurchaseRequisitionId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("QuotedItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseRequisitionId");

                    b.HasIndex("QuotedItemId");

                    b.ToTable("RequisitionEntries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZingCRM_Demo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Item", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Project", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZingCRM_Demo.Models.ApplicationUser", "OperationUser")
                        .WithMany()
                        .HasForeignKey("OperationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZingCRM_Demo.Models.ApplicationUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("OperationUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.PurchaseRequisition", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.Project", "Project")
                        .WithMany("PurchaseRequisitions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.QuotationItem", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.Item", "Item")
                        .WithMany("QuotationItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZingCRM_Demo.Models.Project", "Project")
                        .WithMany("QuotationItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.RequisitionEntry", b =>
                {
                    b.HasOne("ZingCRM_Demo.Models.PurchaseRequisition", null)
                        .WithMany("RequisitionEntries")
                        .HasForeignKey("PurchaseRequisitionId");

                    b.HasOne("ZingCRM_Demo.Models.QuotationItem", "QuotedItem")
                        .WithMany()
                        .HasForeignKey("QuotedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuotedItem");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.ApplicationUser", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Item", b =>
                {
                    b.Navigation("QuotationItems");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.Project", b =>
                {
                    b.Navigation("PurchaseRequisitions");

                    b.Navigation("QuotationItems");
                });

            modelBuilder.Entity("ZingCRM_Demo.Models.PurchaseRequisition", b =>
                {
                    b.Navigation("RequisitionEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
